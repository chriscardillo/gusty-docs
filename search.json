[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "gusty",
    "section": "",
    "text": "Preface\nOrchestration, or the routine scheduling and exection of dependent tasks, is a core component of modern data work. Orchestration continues to reach more and more data workers - it was originally a focus for data engineers, but it now permeates the work of data analysts, analytics engineers, data scientists, and machine learning engineers. The easier it is for any class of data worker to orchestrate their code, the easier it is for any member of an organization to derive value from the outputs of that code."
  },
  {
    "objectID": "index.html#flavors-of-orchestration-code",
    "href": "index.html#flavors-of-orchestration-code",
    "title": "gusty",
    "section": "Flavors of Orchestration Code",
    "text": "Flavors of Orchestration Code\nOrchestration with Python is a vast and opinionated landscape, but there are three clear flavors of orchestration to have emerged over time:\n\nObject-oriented orchestration, where tasks are objects and dependencies between tasks are handled with methods. Airflow’s classic style is a good example of object-oriented orchestration.\nDecorative orchestration, where tasks are functions and decorators are used to configure the tasks. Dependencies are often managed by passing the output of one function into the input of another. Airflow’s taskflow API and Dagster’s entire API are good examples of decorative orchestation.\nFile-oriented orchestration, where tasks are files, and dependencies are cleverly inferred or declared explicitly. Tools like Mage, dbt, and Orchest exemplify file-oriented orchestration."
  },
  {
    "objectID": "index.html#what-is-gusty",
    "href": "index.html#what-is-gusty",
    "title": "gusty",
    "section": "What is gusty?",
    "text": "What is gusty?\ngusty is a file-oriented framework for Airflow, the absolute standard for orchestrators today. Airflow is a Top-Level Apache Project with sustained development, a gigantic ecosystem of provider packages, and is offered as a hosted service by major public clouds and other Airflow-focused companies. While other orchestrators natively support file-oriented orchestration, Airflow is such a good orchestrator that it was compelling to create a file-oriented framework for it. If you are reading this, you are likely already familiar with - or using - Airflow.\ngusty exists to make file-oriented orchestration fun and easy using Airflow, allowing for file-oriented DAGs to be incorporated in existing Airflow projects without any need to change existing work or Airflow code. You can use any Airflow operator with gusty. This document hopes to serve as a guide for getting the most out of file-oriented orchestration in Airflow using gusty."
  },
  {
    "objectID": "gusty-basics.html#gusty-dag-structure",
    "href": "gusty-basics.html#gusty-dag-structure",
    "title": "1  Basic DAG Structure",
    "section": "1.1 gusty DAG Structure",
    "text": "1.1 gusty DAG Structure\nA gusty DAG lives inside of your Airflow DAGs folder (by default $AIRFLOW_HOME/dags), and is comprised of a few core elements:\n\nTask Definition Files - Each file hold specifications for a given task. In the example below, hi.py, hey.sql, and hello.yml are our Task Definition Files. These Task Definition Files are all stored inside our hello_dag folder.\nMETADATA.yml - This optional file contains any argument that could be passed to Airflow’s DAG object, as well as some optional gusty-specifc argument. In the example below, METADATA.yml is stored inside of our hello_dag folder, alongside the Task Definition Files.\nDAG File - The file that turns a gusty DAG folder into an Airflow DAG. It’s more or less like any other Airflow DAG file, and it will contain gusty’s create_dag function. In the example below, hello_dag.py is our DAG Generation File. The DAG Generation File does not need to be named identically to the DAG folder.\n\n$AIRFLOW_HOME/dags/\n│\n├── hello_dag/\n│   ├── METADATA.yml\n│   ├── hi.py\n│   ├── hey.sql\n│   └── hello.yml\n│\n└── hello_dag.py\nIn the event you wanted to create a second gusty DAG, you can just repeat this pattern. For example, if we wanted to add goodbye_dag:\n$AIRFLOW_HOME/dags/\n│\n├── goodbye_dag/\n│   ├── METADATA.yml\n│   ├── bye.py\n│   ├── later.sql\n│   └── goodbye.yml\n|\n├── hello_dag/\n│   ├── METADATA.yml\n│   ├── hi.py\n│   ├── hey.sql\n│   └── hello.yml\n│\n├── goodbye_dag.py\n└── hello_dag.py"
  },
  {
    "objectID": "gusty-basics.html#task-definition-files",
    "href": "gusty-basics.html#task-definition-files",
    "title": "1  Basic DAG Structure",
    "section": "1.2 Task Definition Files",
    "text": "1.2 Task Definition Files\nThe three primary file types used for Task Definition Files are Python, SQL, and YAML. gusty supports other file types, but these three are the most commonly used. The general pattern for Task Definition files is that they contain:\n\nFrontmatter - YAML which carries the specification and parameterization for the task. This can include which Airflow (or custom) operator to use, any keyword arguments to be passed to that operator, and any task dependencies the given task may have.\nBody - The primary contents of the task. For example, the Body of a SQL file is the SQL statement which will be executed; the body of a Python file can be the python_callable that will be ran by the operator. For YAML files, there is no Body because the whole Task Definition File is YAML.\n\ngusty will pass any argument that can be passed to the operator specified (as well as any BaseOperator arguments) to the operator. The specified operator should be a full path to that operator.\nThe file name of each Task Definition File will become the name of the Airflow task.\nLet’s explore these different file types by looking at the contents of these Task Definition Files in hello_dag.\n\nYAML Files with hello.yml\nHere are the contents of our hello.yml file:\noperator: airflow.operators.bash.BashOperator\nbash_command: echo hello\nThe resulting task would contain a BashOperator with the task id hello.\nBecause the entire file is YAML, there is no separation of Frontmatter and Body.\n\n\nSQL Files with hey.sql\nHere are the contents of our hey.sql file:\n---\noperator: airflow.providers.sqlite.operators.sqlite.SqliteOperator\n---\n\nSELECT 'hey'\nThe resulting task would contain a SqliteOperator with the task id hey.\nThe Frontmatter of our SQL file is encased in a set of triple dashes (---). The Body of the file is everything below the second set of triple dashes. For SQL files, the Body of the file is passed to the sql argument of the underlying operator. In this case, SELECT 'hey' would be passed to the sql argument.\n\n\nPython Files with hi.py\nHere are the contents of our hi.py file:\n# ---\n# python_callable: say_hi\n# ---\n\ndef say_hi():\n  phrase = \"hi\"\n  print(phrase)\n  return phrase\nThe resulting task would contain a PythonOperator with the task id hi.\nThe Frontmatter of our Python file is also encased in a set of triple dashes (---), but you will also note that the entirety of the Frontmatter, including the triple dashes, are prefixed by comment hashes (#).\nBy default, gusty will specify specify Airflow’s PythonOperator as the operator, if no operator argument is provided. As with any Task Definition File, you can specify whatever operator is available to you in your Airflow environment, so you could just as easily add operator: airflow.operators.python.PythonVirtualenvOperator to this Frontmatter to use the PythonVirtualenvOperator instead of the PythonOperator.\nWhen a python_callable is specified in the Frontmatter of a Python file, gusty will search the Body of the Python file for a function with the name specified in the Frontmatter’s python_callable argument. For the best results with Python files, it’s recommended that you put all of the Body contents in a named function, as illustrated above."
  },
  {
    "objectID": "gusty-basics.html#metadata.yml",
    "href": "gusty-basics.html#metadata.yml",
    "title": "1  Basic DAG Structure",
    "section": "1.3 METADATA.yml",
    "text": "1.3 METADATA.yml\nThe METADATA.yml file is a special file for passing DAG-related arguments to Airflow’s DAG object. Airflow’s DAG object takes arguments like schedule (when you want your DAG to run), default_args.start_date (how far back you want your DAG to start), default_args.email (who should be notified if a task in DAG fails), and more. The METADATA.yml file is a convenient way to pass this information to Airflow.\nLet’s look at the contents of the METADATA.yml file in our hello_dag folder:\ndescription: \"Saying hello using different file types\"\ndoc_md: |-\n  This is a longform description,\n  which can be accessed from Airflow's\n  Graph view for your DAG. It looks\n  like a tiny poem.\nschedule: \"0 0 * * *\"\ncatchup: False\ndefault_args:\n    owner: You\n    email: you@you.com\n    start_date: !days_ago 28\n    email_on_failure: True\n    email_on_retry: False\n    retries: 1\n    retry_delay: !timedelta \n      minutes: 5\ntags:\n  - docs\n  - demo\n  - hello\nThe above METADATA.yml configures a DAG that runs once a day (schedule: \"0 0 * * *\"), has a start date of 28 days ago (default_args.start_date: !days_ago 28), and is tagged with the tags docs, demo, and hello. It also adds a description, a doc_md, and more, but every argument here is simply an argument in Airflow’s DAG object.\nThe only thing that you might not have seen before are YAML constructors, as illustrated above in the default_args.start_date (using !days_ago) and default_args.retry_delay (using !timedelta) arguments, which are calling functions inside of YAML. In short, YAML constructors are just Python functions that are called when your YAML (or any Task Definition File Frontmatter) is loaded. We’ll discuss YAML constructors more in later sections, but they are a powerful way to control File-oriented DAGs and tasks, and help ensure you have just as much control over your DAGs as writing them any other way.\nWe’ll also cover gusty-specific METADATA.yml later on, but for now, all you need to know is that the METADATA.yml file is used for passing arguments to Airflow’s DAG object."
  },
  {
    "objectID": "gusty-basics.html#dag-file",
    "href": "gusty-basics.html#dag-file",
    "title": "1  Basic DAG Structure",
    "section": "1.4 DAG File",
    "text": "1.4 DAG File\nFinally, let’s look at the DAG file that ultimately generates the Airflow DAG, hello_dag.py:\nimport os\nfrom gusty import create_dag\n\n# There are many different ways to find Airflow's DAGs directory.\n# hello_dag_dir returns something like: \"/usr/local/airflow/dags/hello_dag\"\nhello_dag_dir = os.path.join(\n  os.environ[\"AIRFLOW_HOME\"], \n  \"dags\", \n  \"hello_dag\")\n\nhello_dag = create_dag(hello_dag_dir, latest_only=False)\ngusty’s create_dag function takes as its first argument the path to a directory containing Task Definition Files, in our case the hello_dag direcory. Any keyword argument that can be passed to Airflow’s DAG object can be passed to create_dag, where any arguments that are specified both in create_dag and METADATA.yml will take the value specified in METADATA.yml.\nAdditionally, create_dag takes some gusty-specific arguments, one of which is illustrated here: latest_only=False, which disables gusty’s default behavior of installing a LatestOnlyOperator at the absolute root of an Airflow DAG. You can read more about the LatestOnlyOperator in Airflow’s documentation, but setting latest_only=False will ensure a gusty-generated DAG mirrors Airflow’s default behavior.\n\nIn subsequent chapters, we’ll cover more of gusty’s capabilities, but these are the core components of generating a file-oriented Airflow DAG with gusty!"
  },
  {
    "objectID": "task-dependencies.html#dependencies",
    "href": "task-dependencies.html#dependencies",
    "title": "2  Task Dependencies",
    "section": "2.1 Dependencies",
    "text": "2.1 Dependencies\nLet’s say that our hello task depended on our hi task running before it. To specify this dependency, we would add the hi task to a list in the dependencies block of the hello.yml Task Definition File:\noperator: airflow.operators.bash.BashOperator\ndependencies:\n  - hi\nbash_command: echo hello\nNow, in our Airflow UI, our DAG graph will show that hi precedes hello.\nRemember, in gusty, the file name (minus the file extension) becomes the task id, so you do not need to specify hi.py, just hi.\nYou can list as many dependencies as you need to for any task."
  },
  {
    "objectID": "task-dependencies.html#external-dependencies",
    "href": "task-dependencies.html#external-dependencies",
    "title": "2  Task Dependencies",
    "section": "2.2 External Dependencies",
    "text": "2.2 External Dependencies\nA common pattern in Airflow is to have tasks in one DAG depend on tasks in another DAG, or to have one DAG depend completely on another DAG. This behavior is possible in gusty by using the external_dependencies block. The external_dependencies block accepts a list of key-value pairs where each key is a DAG id and each value is a task id.\nFor each key-value pair listed in the external_dependencies block, gusty will generate an ExternalTaskSensor, a built-in Airflow sensor, and place the resulting sensor task upstream of the given dependent task. If the same external dependency is specified across multiple tasks, gusty will only create one sensor and place this one sensor upstream of all tasks with the specified external dependency.\nThere are a few ways to configure external dependencies, and we’ll look at all of them below.\n\nSingle Task External Dependency\nLet’s keep building up our hello.yml Task Definition File.\nTo specify that our hello task depends on an upstream task, which we’ll call upstream_task, in an upstream DAG, which we’ll call upstream_dag, we add the following external_dependencies block:\noperator: airflow.operators.bash.BashOperator\ndependencies:\n  - hi\nexternal_dependencies:\n  - upstream_dag: upstream_task\nbash_command: echo hello\nThe result will be a new ExternalTaskSensor task with the task id wait_for_upstream_dag_upstream_task, preceding the existing hello task.\nAs with dependencies, you can list as many external dependecies as you require.\n\n\nWhole DAG External Dependency\nAn alternative to speciying a single task for an external dependency is to specify that the entire upstream DAG is the dependency. In this case, we use the special keyword all to configure the ExternalTaskSensor to wait for the entire DAG:\noperator: airflow.operators.bash.BashOperator\ndependencies:\n  - hi\nexternal_dependencies:\n  - upstream_dag: all\nbash_command: echo hello\nThe result will be a new ExternalTaskSensor task with the task id wait_for_DAG_upstream_dag, preceding the existing hello task.\n\n\nExternal Dependencies in METADATA.yml\nAs an Airflow project grows, you might find that more and more of your tasks have the same external dependency, or sometimes DAGs just logically should depend on one another (e.g. a DAG that ingests data should precede a DAG that transforms that data). For these cases, you can utilize the same exact same external_dependencies block in any METADATA.yml file.\nWhen you specify an external dependency in a METADATA.yml file, the ExternalTaskSensor task will be placed at the root of the DAG, ensuring that no tasks in the DAG run before the ExternalTaskSensor task completes.\n\n\nOffset Schedules\nUnderstandably, but frustratingly, the default behavior of Airflow’s ExternalTaskSensor is to look for DAG runs that have that have ran at the same “logical date”. This means that if you have one DAG scheduled to run daily at 00:00 UTC (\"0 0 * * *\"), let’s call this DAG earlier_dag, and another DAG scheduled to run daily at 06:00 UTC (\"0 6 * * *\"), let’s call this DAG later_dag, and you specify an external dependency between later_dag and earlier_dag, the default syntax for an external_dependencies block will not work, because - in the case where later_dag depends on earlier_dag - the ExternalTaskSensor in later_dag will be looking for an 06:00 UTC DAG run of earlier_dag, which does not exist.\nFortunately, the external_dependencies block accepts an alternative syntax for this scenario, where:\n\nThe keys under external_dependencies are the external DAG ids.\nA tasks list is provided for a given external DAG.\nAdditional configuration for the ExternalTaskSensor class, such as the execution_delta, can be passed in.\n\nFor example, to configure later_dag (06:00 UTC) to depend on earlier_dag (00:00 UTC), we could add the following block to later_dag’s METADATA.yml:\nexternal_dependencies:\n  earlier_dag:\n    execution_delta: !timedelta\n      hours: 6\n    tasks:\n      - all\nThis will ensure the resulting wait_for_DAG_earlier_dag looks for a successful earlier_dag DAG run at 00:00 UTC (later_dag’s 06:00 UTC run minus 6 hours).\n\n\nAlternative Approaches to Offset Schedules\n\nCustom Sensors\nIt’s possible to create a custom sensor that “doesn’t care” about the logical date, and just looks at the last/latest DAG run. This ensures you don’t have to worry about setting any offset schedules.\nHere is a small snippet inspired by the cal-itp/data-infra repo (which they since deleted in this commit):\nfrom airflow.utils.db import provide_session\nfrom airflow.sensors.external_task_sensor import ExternalTaskSensor\n\n\nclass LastDagRunSensor(ExternalTaskSensor):\n    def __init__(self, external_dag_id, external_task_id=None, **kwargs):\n        super().__init__(\n          external_dag_id=external_dag_id, \n          external_task_id=external_task_id,\n          **kwargs)\n\n        def dag_last_exec(crnt_dttm):\n            return self.get_dag_last_execution_date(self.external_dag_id)\n\n        self.execution_date_fn = dag_last_exec\n\n    @provide_session\n    def get_dag_last_execution_date(self, dag_id, session):\n        from airflow.models import DagModel\n\n        q = session.query(DagModel).filter(DagModel.dag_id == self.external_dag_id)\n\n        dag = q.first()\n        return dag.get_last_dagrun().logical_date\nIn the event you wanted to use this LastDagRunSensor as the sensor class for the external dependencies in your gusty DAG, you could do so by using the wait_for_class argument available in create_dag. For example, here’s what your later_dag.py DAG file might look like if you decided to do so:\nimport os\nfrom gusty import create_dag\n# Wherever you store the code for the above sensor..\nfrom plugins.sensors import LastDagRunSensor\n\nlater_dag_dir = os.path.join(\n  os.environ[\"AIRFLOW_HOME\"], \n  \"dags\", \n  \"later_dag\")\n\nlater_dag = create_dag(\n  later_dag_dir, \n  wait_for_class=LastDagRunSensor,\n  latest_only=False)\nNow all of the external dependencies defined in the later_dag’s Task Definition Files will use the custom LastDagRunSensor instead of the default ExternalTaskSensor.\n\n\n\nOther External Dependency Considerations\nYou can configure your external dependencies further using the wait_for_defaults argument in create_dag, which accepts a dictionary of arguments that are available to Airflow’s ExternalTaskSensor. Here is the subset of parameters available in wait_for_defaults:\n\npoke_interval\ntimeout\nretries\nmode\nsoft_fail\nexecution_delta\nexecution_date_fn\ncheck_existence\n\n\nSet mode to reschedule\nBy default in Airflow, sensors run in mode=\"poke\", which means they take up a worker slot for the entire time they are waiting for the external task/DAG to complete. You can set mode=\"reschedule\" to free up the worker slot in between “pokes”. Building on the create_dag call in later_dag.py above:\nlater_dag = create_dag(\n  later_dag_dir, \n  wait_for_class=LastDagRunSensor,\n  wait_for_defaults={\n    \"mode\": \"reschedule\"\n    },\n  latest_only=False)\n\n\nSet a timeout\nBy default in gusty, external dependencies will timeout after 1 hour, or 3600 seconds. If you want to wait longer, you can set your timeout, in seconds:\nlater_dag = create_dag(\n  later_dag_dir, \n  wait_for_class=LastDagRunSensor,\n  wait_for_defaults={\n    \"mode\": \"reschedule\",\n    \"timeout\": 7200 # 2 hours in seconds\n    },\n  latest_only=False)\n\n\nLearn More\nIf you want to learn more about sensors, check out Airflow’s BaseSensorOperator and Airflow’s BaseOperator."
  }
]